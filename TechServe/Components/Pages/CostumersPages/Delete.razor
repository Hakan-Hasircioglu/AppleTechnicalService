@page "/costumers/delete"

@using Microsoft.EntityFrameworkCore
@using TechServe.Model
@inject IDbContextFactory<TechServe.Data.TechServeContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Costumers</h4>
    <hr />
    @if (costumers is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">CostumerName</dt>
            <dd class="col-sm-10">@costumers.CostumerName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Phone</dt>
            <dd class="col-sm-10">@costumers.Phone</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">E_Mail</dt>
            <dd class="col-sm-10">@costumers.E_Mail</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Adress</dt>
            <dd class="col-sm-10">@costumers.Adress</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">City</dt>
            <dd class="col-sm-10">@costumers.City</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PostalCode</dt>
            <dd class="col-sm-10">@costumers.PostalCode</dd>
        </dl>
        <EditForm method="post" Model="costumers" OnValidSubmit="DeleteCostumers" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(costumers is null)">Delete</button> |
            <a href="/costumers">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Costumers? costumers;

    [SupplyParameterFromQuery]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        costumers = await context.Costumers.FirstOrDefaultAsync(m => m.id == id);

        if (costumers is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteCostumers()
    {
        using var context = DbFactory.CreateDbContext();
        context.Costumers.Remove(costumers!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/costumers");
    }
}
