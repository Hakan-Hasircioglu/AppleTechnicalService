@page "/Staff/edit"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TechServe.Model
@using TechServe.Data
@using Services
@using TechServe.Components.Helpers

@inject IDbContextFactory<TechServe.Data.TechServeContext> DbFactory
@inject TechServeContext DbContext
@inject NavigationManager NavigationManager
@inject NavigationManager NavigationManager
@inject LoggedInStaff LoggedInStaff
@inject RoleService RoleService

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Staff</h4>
<hr />
@if (Staff is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Staff" OnValidSubmit="UpdateStaff" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Staff.id" value="@Staff.id" />
                <div class="mb-3">
                    <label for="staffusername" class="form-label">Username:</label>
                    <InputNumber id="staffusername" @bind-Value="Staff.StaffUsername" class="form-control" ReadOnly/>
                    <ValidationMessage For="() => Staff.StaffUsername" class="text-danger" />
                </div>
                @if(RoleService.Role == "Admin")
                {
                <div class="mb-3">
                    <label for="passwordhash" class="form-label">PasswordHash:</label>
                    <InputText id="passwordhash" @bind-Value="Staff.PasswordHash" class="form-control" />
                    <ValidationMessage For="() => Staff.PasswordHash" class="text-danger" />
                </div>
                }
                <div class="mb-3">
                    <label for="passwordsimple" class="form-label">Password:</label>
                    <InputNumber id="passwordsimple" @bind-Value="Staff.PasswordSimple" class="form-control" />
                    <ValidationMessage For="() => Staff.PasswordSimple" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="fullname" class="form-label">Full Name:</label>
                    <InputText id="fullname" @bind-Value="Staff.FullName" class="form-control" />
                    <ValidationMessage For="() => Staff.FullName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="role" class="form-label">Role:</label>
                    <InputSelect id="role" @bind-Value="Staff.Role" class="form-control">
                        <option value="Staff">Staff</option>
                        <option value="Supervisor">Supervisor</option>
                        <option value="Manager">Manager</option>
                        @if (RoleService.Role == "Admin")
                        {
                        <option value="Admin">Admin</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Staff.Role" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-edit">Save</button>

            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/staff" class="btn btn-back">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int id { get; set; }
    private bool isLoading = true;
    [SupplyParameterFromForm]
    public Staff? Staff { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(250);
        var loggedInStaff = await DbContext.LoggedInStaff.FirstOrDefaultAsync();
        if (loggedInStaff != null)
        {
            RoleService.UpdateSharedData($"{loggedInStaff.Role}");
        }
        await Task.Delay(250);
        using var context = DbFactory.CreateDbContext();
        Staff ??= await context.Staff.FirstOrDefaultAsync(m => m.id == id);
        isLoading = false;
        if (Staff is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateStaff()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Staff!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!StaffExists(Staff!.id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/staff");
    }

    bool StaffExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Staff.Any(e => e.id == id);
    }
}
<style>
    .container {
        position: relative; /* Checkbox listesinin bu kapsayıcıya göre konumlandırılmasını sağlar */
    }

    .used-parts {
        cursor: pointer;
        position: relative; /* Doğru konumlandırma için gerekli */
    }

    .checkbox-list {
        position: absolute; /* Konumlandırma için */
        background: white;
        border: 1px solid #ddd;
        padding: 5px; /* İçerik etrafındaki boşluk */
        z-index: 1000; /* Diğer içeriklerin üstünde görünmesini sağlar */
        box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* Görsel olarak daha belirgin hale getirir */
        display: flex; /* Flex düzeni kullanarak tek sütunlu yapıyı sağlar */
        flex-direction: column; /* Tek sütun düzeni */
        gap: 5px; /* Öğeler arasındaki boşluk */
        max-height: 300px; /* Maksimum yükseklik */
        overflow-y: auto; /* İçerik sığmıyorsa kaydırma çubuğu ekler */
        width: 300px; /* Genişlik ayarı */
    }

        .checkbox-list div {
            display: flex;
            align-items: center;
            font-size: 14px; /* Yazı tipi boyutu */
        }

        .checkbox-list input[type="checkbox"] {
            width: 16px; /* Checkbox genişliği */
            height: 16px; /* Checkbox yüksekliği */
            margin-right: 4px; /* Checkbox ile etiket arasındaki boşluk */
        }


    .btn-primary {
        margin-top: 10px;
    }

    .custom-button {
        height: 20px;
        line-height: 0px;
        font-size: 14px;
        padding: 0 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }



    .form-check {
        flex: 1 0 33%;
        margin: 20px;
        display: inline-block;
    }

    .btn {
        display: inline-block;
        padding: 10px 20px;
        margin: 5px;
        font-size: 16px;
        font-weight: bold;
        text-align: center;
        text-decoration: none;
        border-radius: 5px;
        border: 2px solid; /* Thicker border */
        background-color: transparent; /* Transparent background */
        color: currentColor; /* Uses the color of the border */
        transition: background-color 0.3s, color 0.3s;
    }

    .btn-edit {
        border-color: #007bff; /* Blue border */
        color: #007bff; /* Blue text */
    }

        .btn-edit:hover {
            background-color: #007bff; /* Blue background on hover */
            color: white; /* White text on hover */
        }

    .btn-back {
        border-color: #6c757d; /* Gray border */
        color: #6c757d; /* Gray text */
    }

        .btn-back:hover {
            background-color: #6c757d; /* Gray background on hover */
            color: white; /* White text on hover */
        }

</style>