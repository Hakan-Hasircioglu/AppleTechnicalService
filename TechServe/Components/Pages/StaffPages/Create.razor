@page "/staff/create"

@using Microsoft.EntityFrameworkCore
@using TechServe.Model
@using TechServe.Data
@using TechServe.Components.Helpers
@inject IDbContextFactory<TechServe.Data.TechServeContext> DbFactory
@inject NavigationManager NavigationManager
@inject TechServeContext DbContext

<PageTitle>Add New Staff</PageTitle>

<h1>Add New Staff</h1>

<h4>Staff</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Staff" OnValidSubmit="AddStaff" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="fullname" class="form-label">FullName:</label>
                <InputText id="fullname" @bind-Value="Staff.FullName" class="form-control" />
                <ValidationMessage For="() => Staff.FullName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="staffusername" class="form-label">Staff Username:</label> 
                <InputNumber id="staffusername" @bind-Value="Staff.StaffUsername" class="form-control" ReadOnly/> 
                <ValidationMessage For="() => Staff.StaffUsername" class="text-danger" /> 
            </div>              
            <div class="mb-3">
                <label for="passwordsimple" class="form-label">Password:</label> 
                <InputNumber id="passwordsimple" @bind-Value="Staff.PasswordSimple" class="form-control" Readonly />
                <ValidationMessage For="() => Staff.PasswordSimple" class="text-danger" /> 
            </div>        
       
            <div class="form-group">
                <label for="role">Role:</label>
                <select @onchange="OnValueChanged">
                    <option value=""></option>
                    @foreach (var value in Roles)
                    {
                        <option value="@value">@value</option>
                    }
                </select>
            </div>
            @if (Staff.Role != null)
            {
            <button type="submit" class="btn btn-primary">Create</button>
            }
        </EditForm>
    </div>
</div>


    <div>
        <a href="/staff">Back to List</a>
    </div>


@code {

    [SupplyParameterFromForm]
    public Staff Staff { get; set; } = new();
    private int currentCount;
    private int newId;

    private List<string> Roles = new List<string>
    {
        "Staff", "Supervisor", "Manager", "Admin"
    };
    private void OnValueChanged(ChangeEventArgs e)
    {
        Staff.Role = e.Value.ToString();
    }
    protected override void OnInitialized()
    {
        // Sayfa yüklendiğinde rastgele 6 haneli sayı oluşturulacak

    }
    protected override async Task OnInitializedAsync()
    {
        newId = await DbContext.Staff
        .OrderByDescending(m => m.id)
        .Select(m => m.id)
        .FirstOrDefaultAsync();
        newId++;
        currentCount = newId;
        GenerateRandomPassword();
    }
    private void GenerateRandomPassword()
    {
        int totalLength = 6; // İstenilen toplam uzunluk
        currentCount++;

        // Eğer zeroFillLength sıfırdan büyükse, sayının başına o kadar sıfır eklenir
        string zeroFilledNumber = currentCount.ToString().PadRight(6, '0');
        // 100000 ile 999999 arasında rastgele bir sayı oluştur
        var random = new Random();
        Staff.PasswordSimple = random.Next(100000, 999999);
        Staff.StaffUsername = int.Parse(zeroFilledNumber);
        Staff.PasswordHash = PasswordHelper.HashPassword(Convert.ToString(Staff.PasswordSimple));
    }

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddStaff()
    {
        Staff.id = newId;
        using var context = DbFactory.CreateDbContext();
        context.Staff.Add(Staff);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/staff");
    }
}
