@page "/staff/create"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TechServe.Model
@using TechServe.Data
@using Services
@using TechServe.Components.Helpers
@inject IDbContextFactory<TechServe.Data.TechServeContext> DbFactory
@inject NavigationManager NavigationManager
@inject TechServeContext DbContext
@inject RoleService RoleService

<PageTitle>Add New Staff</PageTitle>

<h1>Add New Staff</h1>

<h4>Staff</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Staff" OnValidSubmit="AddStaff" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="fullname" class="form-label">FullName:</label>
                <InputText id="fullname" @bind-Value="Staff.FullName" class="form-control" />
                <ValidationMessage For="() => Staff.FullName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="staffusername" class="form-label">Staff Username:</label> 
                <InputNumber id="staffusername" @bind-Value="Staff.StaffUsername" class="form-control" ReadOnly/> 
                <ValidationMessage For="() => Staff.StaffUsername" class="text-danger" /> 
            </div>              
            <div class="mb-3">
                <label for="passwordsimple" class="form-label">Password:</label> 
                <InputNumber id="passwordsimple" @bind-Value="Staff.PasswordSimple" class="form-control" Readonly />
                <ValidationMessage For="() => Staff.PasswordSimple" class="text-danger" /> 
            </div>        
       
            <div class="form-group">
                <label for="role">Role:</label>
                <select @onchange="OnValueChanged" class="form-control">
                    <option value="Staff">Staff</option>
                    <option value="Supervisor">Supervisor</option>
                    <option value="Manager">Manager</option>
                    @if (RoleService.Role == "Admin")
                    {
                    <option value="Admin">Admin</option>
                    }
                </select>
            </div>          
            <button type="submit" class="btn btn-edit">Create</button>
        </EditForm>
    </div>
</div>


    <div>
    <a href="/staff" class="btn btn-back">Back to List</a>
    </div>


@code {

    [SupplyParameterFromForm]
    public Staff Staff { get; set; } = new();
    private int currentCount;
    private int newId;
    private bool isLoading = true;

    private List<string> Roles = new List<string>
    {
        "Staff", "Supervisor", "Manager", "Admin"
    };
    private void OnValueChanged(ChangeEventArgs e)
    {
        Staff.Role = e.Value.ToString();
    }
    protected override void OnInitialized()
    {
        // Sayfa yüklendiğinde rastgele 6 haneli sayı oluşturulacak

    }
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(200);
        newId = await DbContext.Staff
        .OrderByDescending(m => m.id)
        .Select(m => m.id)
        .FirstOrDefaultAsync();
        newId++;
        currentCount = newId;
        GenerateRandomPassword();
        await Task.Delay(500);
        isLoading = false;
        var loggedInStaff = await DbContext.LoggedInStaff.FirstOrDefaultAsync();
        if (loggedInStaff != null)
        {
            RoleService.UpdateSharedData($"{loggedInStaff.Role}");
        }
    }
    private void GenerateRandomPassword()
    {
        int totalLength = 6; // İstenilen toplam uzunluk
        currentCount++;

        // Eğer zeroFillLength sıfırdan büyükse, sayının başına o kadar sıfır eklenir
        string zeroFilledNumber = currentCount.ToString().PadRight(6, '0');
        // 100000 ile 999999 arasında rastgele bir sayı oluştur
        var random = new Random();
        Staff.PasswordSimple = random.Next(100000, 999999);
        Staff.StaffUsername = int.Parse(zeroFilledNumber);
        Staff.PasswordHash = PasswordHelper.HashPassword(Convert.ToString(Staff.PasswordSimple));
    }

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddStaff()
    {
        Staff.id = newId;
        using var context = DbFactory.CreateDbContext();
        context.Staff.Add(Staff);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/staff");
    }
}

<style>
    .container {
        position: relative; /* Checkbox listesinin bu kapsayıcıya göre konumlandırılmasını sağlar */
    }

    .used-parts {
        cursor: pointer;
        position: relative; /* Doğru konumlandırma için gerekli */
    }

    .checkbox-list {
        position: absolute; /* Konumlandırma için */
        background: white;
        border: 1px solid #ddd;
        padding: 5px; /* İçerik etrafındaki boşluk */
        z-index: 1000; /* Diğer içeriklerin üstünde görünmesini sağlar */
        box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* Görsel olarak daha belirgin hale getirir */
        display: flex; /* Flex düzeni kullanarak tek sütunlu yapıyı sağlar */
        flex-direction: column; /* Tek sütun düzeni */
        gap: 5px; /* Öğeler arasındaki boşluk */
        max-height: 300px; /* Maksimum yükseklik */
        overflow-y: auto; /* İçerik sığmıyorsa kaydırma çubuğu ekler */
        width: 300px; /* Genişlik ayarı */
    }

        .checkbox-list div {
            display: flex;
            align-items: center;
            font-size: 14px; /* Yazı tipi boyutu */
        }

        .checkbox-list input[type="checkbox"] {
            width: 16px; /* Checkbox genişliği */
            height: 16px; /* Checkbox yüksekliği */
            margin-right: 4px; /* Checkbox ile etiket arasındaki boşluk */
        }


    .btn-primary {
        margin-top: 10px;
    }

    .custom-button {
        height: 20px;
        line-height: 0px;
        font-size: 14px;
        padding: 0 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }



    .form-check {
        flex: 1 0 33%;
        margin: 20px;
        display: inline-block;
    }

    .btn {
        display: inline-block;
        padding: 10px 20px;
        margin: 5px;
        font-size: 16px;
        font-weight: bold;
        text-align: center;
        text-decoration: none;
        border-radius: 5px;
        border: 2px solid; /* Thicker border */
        background-color: transparent; /* Transparent background */
        color: currentColor; /* Uses the color of the border */
        transition: background-color 0.3s, color 0.3s;
    }

    .btn-edit {
        border-color: #007bff; /* Blue border */
        color: #007bff; /* Blue text */
    }

        .btn-edit:hover {
            background-color: #007bff; /* Blue background on hover */
            color: white; /* White text on hover */
        }

    .btn-back {
        border-color: #6c757d; /* Gray border */
        color: #6c757d; /* Gray text */
    }

        .btn-back:hover {
            background-color: #6c757d; /* Gray background on hover */
            color: white; /* White text on hover */
        }

</style>