@page "/masters/create"

@using Microsoft.EntityFrameworkCore
@using TechServe.Model
@using TechServe.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Text.Json
@using Blazored.LocalStorage
@using BlazorInputMask

@inject IDbContextFactory<TechServe.Data.TechServeContext> DbFactory
@inject NavigationManager NavigationManager
@inject TechServeContext DbContext
@inject ProtectedSessionStorage sessionStorage

<PageTitle>Create</PageTitle>
@if(isLoading)
{
    <p>Page is Loading.. Please Wait..</p>
}
else
{
<h1>Create</h1>

<h4>Master</h4>
<hr />
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <EditForm method="post" Model="Master" OnValidSubmit="AddMaster" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />
                <div class="col-md-6">
                    <label for="costumername" class="form-label">Costumer Name:</label>
                    <InputText id="costumername" @bind-Value="Master.CostumerName" class="form-control" />
                    <ValidationMessage For="() => Master.CostumerName" class="text-danger" />
                </div>
                <div class="row mb-3">
                        <div class="col-md-2">
                            <label for="phone" class="form-label">Phone:</label>
                            <InputText id="phone" @bind-Value="Master.Phone" class="form-control" placeholder="(555)" />
                            <ValidationMessage For="() => Master.Phone" class="text-danger" />
                        </div>
                    <div class="col-md-4"></div>
                    <div class="col-md-4">
                        <label for="e_mail" class="form-label">E_Mail:</label>
                        <InputText id="e_mail" @bind-Value="Master.E_Mail" class="form-control" />
                        <ValidationMessage For="() => Master.E_Mail" class="text-danger" />
                    </div>
                </div>
                    <div class="mb-3">
                        <label for="adress" class="form-label">Adress:</label>
                    <textarea id="adress" @bind="Master.Adress" class="form-control" rows="3" style=" height: calc(1.3em * 3);resize: none;"></textarea>
                        <ValidationMessage For="() => Master.Adress" class="text-danger" />
                    </div>
                <div class="row mb-3">
                    <div class="col-md-3">
                        <label for="city" class="form-label">City:</label>
                        <InputSelect id="city" @bind-Value="Master.City" class="form-control">
                            @foreach (var city in CityOptions)
                            {
                                <option value="@city">@city</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Master.Adress" class="text-danger" />
                    </div>
                    <div class="col-md-3"></div>
                    <div class="col-md-3">
                        <label for="postalcode" class="form-label">Postal Code:</label>
                        <InputText id="postalcode" @bind-Value="Master.PostalCode" class="form-control" />
                        <ValidationMessage For="() => Master.PostalCode" class="text-danger" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-3">
                        <label for="devicelbrand" class="form-label">Device Brand:</label>
                        <InputSelect id="devicelbrand" @bind-Value="Master.DevicelBrand" class="form-control" @onchange="OnBrandChanged">
                            @foreach (var brand in DeviceBrandOptions)
                            {
                                <option value="@brand">@brand</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Master.DevicelBrand" class="text-danger" />
                    </div>
                    <div class="col-md-3"></div>
                    @if (Master.DevicelBrand == "Apple")
                    {
                        <div class="col-md-3">
                            <label for="devicelmodel" class="form-label">Device Model:</label>
                            <select @onchange="OnDeviceModelChanged" class="form-control">
                                <option value="Choose Model">Choose Model:</option>
                                @foreach (var model in DeviceModelOptions)
                                {
                                    <option value="@model" selected="@((model == selectedDeviceModel) ? "selected" : null)">@model</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        Master.DevicelModel = "";
                    }  
                </div>
                <div class="row mb-3">
                    <div class="col-md-3">
                            <label for="servicestatus" class="form-label">Service Status:</label>
                        <InputSelect id="servicestatus" @bind-Value="Master.ServiceStatus" class="form-control" @onclick="CalculatePrice">
                                @foreach (var status in ServiceStatusOptions)
                                {
                                <option value="@status">@status</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => Master.ServiceStatus" class="text-danger" />
                    </div>  
                    <div class="col-md-1"></div>
                    <div class="col-md-3">
                        <label for="typeofservice" class="form-label">Type Of Service:</label>
                        <InputSelect id="typeofservice" @bind-Value="Master.TypeOfService" class="form-control" @onclick="CalculatePrice">
                            @foreach (var status in TypeOfServiceOptions)
                            {
                                <option value="@status">@status</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Master.TypeOfService" class="text-danger" />
                    </div>
                    <div class="col-md-1"></div>
                   
                </div>
                <div class="row mb-3">
                    @if(isActiveUsedPartsBar)
                    {
                        <div class="col-md-12 containerrr">

                            <label for="usedparts" class="used-parts">UsedParts:</label>
                            <InputText id="usedparts" @bind-Value="Master.UsedParts" class="form-control" Readonly @onclick=ToggleCheckboxList />
                            <ValidationMessage For="() => Master.UsedParts" class="text-danger" />


                            @if (isCheckboxListVisible)
                            {
                                <div class="checkbox-list">
                                    @if (spareParts != null && spareParts.Count > 0 && Master.TypeOfService != "")
                                    {
                                        @foreach (var part in spareParts)
                                        {
                                            <InputCheckbox @bind-Value="@part.IsSelected" />
                                            <label>@part.PartsType</label>

                                            <br />
                                        }
                                        <button type="button" class="btn btn-primary" @onclick="CalculatePrice">Calculate Price</button>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="row mb-3">
                    <div class="col-md-3">
                        <label for="servicecode" class="form-label">Service Code:</label>
                        <InputText id="servicecode" @bind-Value="Master.ServiceCode" class="form-control" Readonly />
                        <ValidationMessage For="() => Master.ServiceCode" class="text-danger" />
                    </div>
                    <div class="col-md-3"></div>
                    <div class="col-md-3">
                        <label for="price" class="form-label">Price:</label>
                        <InputNumber id="price" @bind-Value="Master.Price" class="form-control" Readonly />
                        <ValidationMessage For="() => Master.Price" class="text-danger" />
                    </div>
                </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                        <label for="description" class="form-label">Description:</label>
                        <InputText id="description" @bind-Value="Master.Description" class="form-control" />
                        <ValidationMessage For="() => Master.Description" class="text-danger" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-3">
                        <label for="arrivaldate" class="form-label">Arrival Date:</label>
                        <InputDate id="arrivaldate" @bind-Value="Master.ArrivalDate" class="form-control" />
                        <ValidationMessage For="() => Master.ArrivalDate" class="text-danger" />
                    </div>
                    <div class="col-md-3"></div>
                    <div class="col-md-3">
                        <div class="form-label">
                        @if(Master.ServiceStatus == "Completed")
                        {
                            Master.CompletionDate = DateOnly.FromDateTime(DateTime.Today);

                                <label for="completiondate" class="form-label">Completion Date:</label>
                                <InputDate id="completiondate" @bind-Value="Master.CompletionDate" class="form-control"/>
                                <ValidationMessage For="() => Master.CompletionDate" class="text-danger" />

                        }
                        else
                        {
                           Master.CompletionDate = DateOnly.MinValue;
                        }
                        </div>
                    </div>
                </div>
                <button type="submit" class="btn btn-edit">Create</button>
            </EditForm>
        </div>
    </div>
</div>


<div>
    <a href="/masters" class="btn btn-back">Back to List</a>
</div>
}
@code {

    [SupplyParameterFromForm]
    public Master Master { get; set; } = new();
    public ServiceCodeCreater ServiceCodeCreater { get; set; } = new();
    public DetailsTable DetailsTable { get; set; } = new();
    public Costumers Costumers { get; set; } = new();
    // Options for Device Brand
    private bool isLoading = true;

    protected override void OnInitialized()
    {
        Master.City = "";
        Master.DevicelBrand = "";
        Master.DevicelModel = "";
        Master.TypeOfService = "";
        Master.ServiceStatus = "";
    }

    private void OnBrandChanged(ChangeEventArgs e)
    {
        // Clear the selected model if the brand is changed
        Master.DevicelModel = null;
        StateHasChanged();
    }

    #region ChechBox
    private int masterId;
    private string selectedDeviceModel;
    private float masterPrice;
    private List<SparePartsCheckboxModel> spareParts;
    private List<SparePartsCheckboxModel> selectedParts = new List<SparePartsCheckboxModel>();
    private bool isCheckboxListVisible = false;
    private bool isActiveUsedPartsBar = false;

    private void ToggleCheckboxList()
    {       
        if(!isCheckboxListVisible)
        {
            isCheckboxListVisible = true;
        }
        else if (isCheckboxListVisible)
        {
            CalculatePrice();
        }
    }

    private string GetSelectedPartsAsString()
    {
        if (spareParts != null)
        {
            var selectedParts = spareParts
                .Where(p => p.IsSelected)
                .Select(p => p.PartsType)
                .ToList();

            return string.Join(" - ", selectedParts);
        }
        return string.Empty;
    }
    private async Task OnDeviceModelChanged(ChangeEventArgs e)
    {
        selectedDeviceModel = e.Value.ToString();
        Master.ServiceStatus = null;
        Master.TypeOfService = null;
        CalculatePrice();
        Master.UsedParts= null;
        Master.Price = 0; 

        await LoadSparePartsAsync();
        // CalculatePrice();
    }

    private async Task LoadSparePartsAsync()
    {
        if (!string.IsNullOrEmpty(selectedDeviceModel))
        {
            spareParts = await DbFactory.CreateDbContext().SpareParts
                .Where(sp => sp.SparePartsModel == selectedDeviceModel)
                .Select(sp => new SparePartsCheckboxModel
                    {
                        PartsType = sp.PartsType,
                        RepairOfCostOfThePart = sp.RepairOfCostOfThePart,
                        ReplacementOfCostOfThePart = sp.ReplacementOfCostOfThePart,
                        SparePrice = sp.SparePrice,
                        IsSelected = false
                    })
            .ToListAsync();
            isActiveUsedPartsBar = true;
        }
        else
        {
            spareParts = new List<SparePartsCheckboxModel>();
            isActiveUsedPartsBar = false;
        }
    }
    private async Task CalculatePrice()
    {
        float totalCost = 0;

        if (Master.TypeOfService == "Repair")
        {
            totalCost = spareParts.Where(p => p.IsSelected)
                .Sum(p => p.RepairOfCostOfThePart);
        }
        else if (Master.TypeOfService == "Replacement")
        {
            totalCost = spareParts.Where(p => p.IsSelected)
                .Sum(p => p.ReplacementOfCostOfThePart + p.SparePrice);
        }
        Master.DevicelModel = selectedDeviceModel;
        Master.Price = totalCost;

        var usedParts = GetSelectedPartsAsString();
        Master.UsedParts = usedParts;

        isCheckboxListVisible = false;
    }
    private class SparePartsCheckboxModel
    {
        public string PartsType { get; set; }
        public bool IsSelected { get; set; }
        public float  RepairOfCostOfThePart { get; set; }
        public float ReplacementOfCostOfThePart { get; set; }
        public float SparePrice { get; set; }
    }
    #endregion

    #region Lists
    private List<string> FilteredDeviceModelOptions => Master.DevicelBrand == "Apple"
        ? DeviceModelOptions.Where(m => m.StartsWith("iPhone")).ToList()
        : new List<string>();
    private List<string> DeviceBrandOptions = new List<string>
    {
        "Apple",
        "Samsung"
    };
    // Options for Device Model
    private List<string> DeviceModelOptions = new List<string>
    {
        "iPhone 11",
        "iPhone 11 Pro",
        "iPhone 11 Pro Max",
        "iPhone 12",
        "iPhone 12 Pro",
        "iPhone 12 Pro Max",
        "iPhone 13",
        "iPhone 13 Pro",
        "iPhone 13 Pro Max",
        "iPhone 14",
        "iPhone 14 Pro",
        "iPhone 14 Pro Max",
        "iPhone 15",
        "iPhone 15 Pro",
        "iPhone 15 Pro Max",

    };
    private List<string> CityOptions = new List<string>
    {
        "Adana", "Adıyaman", "Afyonkarahisar", "Ağrı", "Aksaray", "Amasya", "Ankara", "Antalya", "Artvin", "Aydın",
        "Balıkesir", "Bartın", "Batman", "Bayburt", "Bilecik", "Bingöl", "Bitlis", "Bolu", "Burdur", "Bursa",
        "Çanakkale", "Çankırı", "Çorum", "Denizli", "Diyarbakır", "Düzce", "Edirne", "Elazığ", "Erzincan", "Erzurum",
        "Eskişehir", "Gaziantep", "Giresun", "Gümüşhane", "Hakkari", "Hatay", "Iğdır", "Isparta", "İstanbul", "İzmir",
        "Kahramanmaraş", "Karabük", "Karaman", "Kars", "Kastamonu", "Kayseri", "Kırıkkale", "Kırklareli", "Kırşehir",
        "Kilis", "Kocaeli", "Konya", "Kütahya", "Malatya", "Manisa", "Mardin", "Mersin", "Muğla", "Muş",
        "Nevşehir", "Niğde", "Ordu", "Osmaniye", "Rize", "Sakarya", "Samsun", "Şanlıurfa", "Şırnak", "Siirt",
        "Sinop", "Sivas", "Tekirdağ", "Tokat", "Trabzon", "Tunceli", "Uşak", "Van", "Yalova", "Yozgat", "Zonguldak"
    };
    // Options for Type of Service
    private List<string> TypeOfServiceOptions = new List<string>
    {
        "Repair",
        "Replacement",
    };
    // Options for Service Status
    private List<string> ServiceStatusOptions = new List<string>
    {
        "Pending",
        "In Progress",
        "Completed"
    };
    #endregion

    // Service Code Zerofill + id num
    private int currentCount;

    protected override async Task OnInitializedAsync()
    {
        Master.ArrivalDate = DateOnly.FromDateTime(DateTime.Today);
        await Task.Delay(500);
        // Service Code
        currentCount = await DbContext.Master
            .OrderByDescending(m => m.id)
            .Select(m => m.id)
            .FirstOrDefaultAsync();
        await Task.Delay(500);
        isLoading = false;
        int totalLength = 5;

        int numberLength = currentCount.ToString().Length;
        int zeroFillLength = totalLength - numberLength;

        string zeroFilledNumber = zeroFillLength > 0
            ? currentCount.ToString().PadLeft(totalLength, '0')
            : currentCount.ToString();

        Master.ServiceCode = Master.ArrivalDate.ToString("yyyyMMdd") + zeroFilledNumber;
    }


    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddMaster()
    {
        //Create
        using var context = DbFactory.CreateDbContext();
        context.Master.Add(Master);
        await context.SaveChangesAsync();
        DateOnly firstdateOnlyValue;
        DateOnly seconddateOnlyValue;
        seconddateOnlyValue = Master.CompletionDate;
        firstdateOnlyValue = Master.ArrivalDate;
        var newDetailItem  = new DetailsTable
        {
            TypeOfService= Master.TypeOfService,
            ServiceStatus = Master.ServiceStatus,
            ServiceCode = Master.ServiceCode,
            Description = Master.Description,
            PartsUsedForRepair = Master.UsedParts,
            Price = Master.Price,
            ArrivalDate = firstdateOnlyValue.ToDateTime(TimeOnly.MinValue),
            CompletionDate = seconddateOnlyValue.ToDateTime(TimeOnly.MinValue),
        }; 
        context.Details.Add(newDetailItem);
        await context.SaveChangesAsync();
        var newCostumerItem = new Costumers
            {
                CostumerName = Master.CostumerName,
                Phone = Master.Phone,
                E_Mail = Master.E_Mail,
                Adress = Master.Adress,
                City = Master.City,
                PostalCode = Master.PostalCode,
            };
        context.Costumers.Add(newCostumerItem);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/masters");
    }

}

<style>
    .container {
        position: relative; /* Checkbox listesinin bu kapsayıcıya göre konumlandırılmasını sağlar */
    }

    .used-parts {
        cursor: pointer;
        position: relative; /* Doğru konumlandırma için gerekli */
    }

    .checkbox-list {
        position: absolute; /* Konumlandırma için */
        background: white;
        border: 1px solid #ddd;
        padding: 5px; /* İçerik etrafındaki boşluk */
        z-index: 1000; /* Diğer içeriklerin üstünde görünmesini sağlar */
        box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* Görsel olarak daha belirgin hale getirir */
        display: flex; /* Flex düzeni kullanarak tek sütunlu yapıyı sağlar */
        flex-direction: column; /* Tek sütun düzeni */
        gap: 5px; /* Öğeler arasındaki boşluk */
        max-height: 300px; /* Maksimum yükseklik */
        overflow-y: auto; /* İçerik sığmıyorsa kaydırma çubuğu ekler */
        width: 300px; /* Genişlik ayarı */
    }

        .checkbox-list div {
            display: flex;
            align-items: center;
            font-size: 14px; /* Yazı tipi boyutu */
        }

        .checkbox-list input[type="checkbox"] {
            width: 16px; /* Checkbox genişliği */
            height: 16px; /* Checkbox yüksekliği */
            margin-right: 4px; /* Checkbox ile etiket arasındaki boşluk */
        }


    .btn-primary {
        margin-top: 10px;
    }
    .custom-button {
        height: 20px;
        line-height: 0px;
        font-size: 14px;
        padding: 0 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }



    .form-check {
        flex: 1 0 33%; 
        margin: 20px;
        display: inline-block;
    }

    .btn {
        display: inline-block;
        padding: 10px 20px;
        margin: 5px;
        font-size: 16px;
        font-weight: bold;
        text-align: center;
        text-decoration: none;
        border-radius: 5px;
        border: 2px solid; /* Thicker border */
        background-color: transparent; /* Transparent background */
        color: currentColor; /* Uses the color of the border */
        transition: background-color 0.3s, color 0.3s;
    }

    .btn-edit {
        border-color: #007bff; /* Blue border */
        color: #007bff; /* Blue text */
    }

        .btn-edit:hover {
            background-color: #007bff; /* Blue background on hover */
            color: white; /* White text on hover */
        }

    .btn-back {
        border-color: #6c757d; /* Gray border */
        color: #6c757d; /* Gray text */
    }

        .btn-back:hover {
            background-color: #6c757d; /* Gray background on hover */
            color: white; /* White text on hover */
        }

</style>