@page "/spareparts/details"

@using Microsoft.EntityFrameworkCore
@using TechServe.Model
@inject IDbContextFactory<TechServe.Data.TechServeContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>SpareParts</h4>
    <hr />
    @if (spareparts is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">SparePartsBrand</dt>
            <dd class="col-sm-10">@spareparts.SparePartsBrand</dd>
            <dt class="col-sm-2">SparePartsModel</dt>
            <dd class="col-sm-10">@spareparts.SparePartsModel</dd>
            <dt class="col-sm-2">PartsType</dt>
            <dd class="col-sm-10">@spareparts.PartsType</dd>
            <dt class="col-sm-2">AmountOfSpareParts</dt>
            <dd class="col-sm-10">@spareparts.AmountOfSpareParts</dd>
            <dt class="col-sm-2">Barcode</dt>
            <dd class="col-sm-10">@spareparts.Barcode</dd>
            <dt class="col-sm-2">SparePrice</dt>
            <dd class="col-sm-10">@spareparts.SparePrice</dd>
            <dt class="col-sm-2">RepairOfCostOfThePart</dt>
            <dd class="col-sm-10">@spareparts.RepairOfCostOfThePart</dd>
            <dt class="col-sm-2">ReplacementOfCostOfThePart</dt>
            <dd class="col-sm-10">@spareparts.ReplacementOfCostOfThePart</dd>
        </dl>
        <div>
            <a href="@($"/spareparts/edit?id={spareparts.id}")">Edit</a> |
            <a href="@($"/spareparts")">Back to List</a>
        </div>
    }
</div>

@code {
    SpareParts? spareparts;

    [SupplyParameterFromQuery]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        spareparts = await context.SpareParts.FirstOrDefaultAsync(m => m.id == id);

        if (spareparts is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
