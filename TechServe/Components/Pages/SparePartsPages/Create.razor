@page "/spareparts/create"

@using Microsoft.EntityFrameworkCore
@using TechServe.Model
@inject IDbContextFactory<TechServe.Data.TechServeContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>SpareParts</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="SpareParts" OnValidSubmit="AddSpareParts" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="sparepartsbrand" class="form-label">SparePartsBrand:</label> 
                <InputText id="sparepartsbrand" @bind-Value="SpareParts.SparePartsBrand" class="form-control" /> 
                <ValidationMessage For="() => SpareParts.SparePartsBrand" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="sparepartsmodel" class="form-label">SparePartsModel:</label> 
                <InputText id="sparepartsmodel" @bind-Value="SpareParts.SparePartsModel" class="form-control" /> 
                <ValidationMessage For="() => SpareParts.SparePartsModel" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="partstype" class="form-label">PartsType:</label> 
                <InputText id="partstype" @bind-Value="SpareParts.PartsType" class="form-control" /> 
                <ValidationMessage For="() => SpareParts.PartsType" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="amountofspareparts" class="form-label">AmountOfSpareParts:</label> 
                <InputNumber id="amountofspareparts" @bind-Value="SpareParts.AmountOfSpareParts" class="form-control" /> 
                <ValidationMessage For="() => SpareParts.AmountOfSpareParts" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="barcode" class="form-label">Barcode:</label> 
                <InputNumber id="barcode" @bind-Value="SpareParts.Barcode" class="form-control" /> 
                <ValidationMessage For="() => SpareParts.Barcode" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="spareprice" class="form-label">SparePrice:</label> 
                <InputNumber id="spareprice" @bind-Value="SpareParts.SparePrice" class="form-control" /> 
                <ValidationMessage For="() => SpareParts.SparePrice" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="repairofcostofthepart" class="form-label">RepairOfCostOfThePart:</label> 
                <InputNumber id="repairofcostofthepart" @bind-Value="SpareParts.RepairOfCostOfThePart" class="form-control" /> 
                <ValidationMessage For="() => SpareParts.RepairOfCostOfThePart" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="replacementofcostofthepart" class="form-label">ReplacementOfCostOfThePart:</label> 
                <InputNumber id="replacementofcostofthepart" @bind-Value="SpareParts.ReplacementOfCostOfThePart" class="form-control" /> 
                <ValidationMessage For="() => SpareParts.ReplacementOfCostOfThePart" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/spareparts" class="btn btn-back">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    public SpareParts SpareParts { get; set; } = new();

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddSpareParts()
    {
        using var context = DbFactory.CreateDbContext();
        context.SpareParts.Add(SpareParts);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/spareparts");
    }
}

<style>
    .container {
        position: relative; /* Checkbox listesinin bu kapsayıcıya göre konumlandırılmasını sağlar */
    }

    .used-parts {
        cursor: pointer;
        position: relative; /* Doğru konumlandırma için gerekli */
    }

    .checkbox-list {
        position: absolute; /* Konumlandırma için */
        background: white;
        border: 1px solid #ddd;
        padding: 5px; /* İçerik etrafındaki boşluk */
        z-index: 1000; /* Diğer içeriklerin üstünde görünmesini sağlar */
        box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* Görsel olarak daha belirgin hale getirir */
        display: flex; /* Flex düzeni kullanarak tek sütunlu yapıyı sağlar */
        flex-direction: column; /* Tek sütun düzeni */
        gap: 5px; /* Öğeler arasındaki boşluk */
        max-height: 300px; /* Maksimum yükseklik */
        overflow-y: auto; /* İçerik sığmıyorsa kaydırma çubuğu ekler */
        width: 300px; /* Genişlik ayarı */
    }

        .checkbox-list div {
            display: flex;
            align-items: center;
            font-size: 14px; /* Yazı tipi boyutu */
        }

        .checkbox-list input[type="checkbox"] {
            width: 16px; /* Checkbox genişliği */
            height: 16px; /* Checkbox yüksekliği */
            margin-right: 4px; /* Checkbox ile etiket arasındaki boşluk */
        }


    .btn-primary {
        margin-top: 10px;
    }

    .custom-button {
        height: 20px;
        line-height: 0px;
        font-size: 14px;
        padding: 0 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }



    .form-check {
        flex: 1 0 33%;
        margin: 20px;
        display: inline-block;
    }

    .btn {
        display: inline-block;
        padding: 10px 20px;
        margin: 5px;
        font-size: 16px;
        font-weight: bold;
        text-align: center;
        text-decoration: none;
        border-radius: 5px;
        border: 2px solid; /* Thicker border */
        background-color: transparent; /* Transparent background */
        color: currentColor; /* Uses the color of the border */
        transition: background-color 0.3s, color 0.3s;
    }

    .btn-edit {
        border-color: #007bff; /* Blue border */
        color: #007bff; /* Blue text */
    }

        .btn-edit:hover {
            background-color: #007bff; /* Blue background on hover */
            color: white; /* White text on hover */
        }

    .btn-back {
        border-color: #6c757d; /* Gray border */
        color: #6c757d; /* Gray text */
    }

        .btn-back:hover {
            background-color: #6c757d; /* Gray background on hover */
            color: white; /* White text on hover */
        }

</style>