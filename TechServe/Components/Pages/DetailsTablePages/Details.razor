@page "/detailstables/details"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TechServe.Model
@using TechServe.Data
@using Services
@using TechServe.Components.Helpers

@inject IDbContextFactory<TechServe.Data.TechServeContext> DbFactory
@inject NavigationManager NavigationManager
@inject LoggedInStaff LoggedInStaff
@inject TechServeContext DbContext
@inject RoleService RoleService
@inject IJSRuntime JS

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>DetailsTable</h4>
    <hr />
    @if (detailstable is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">TypeOfService</dt>
            <dd class="col-sm-10">@detailstable.TypeOfService</dd>
            <dt class="col-sm-2">ServiceStatus</dt>
            <dd class="col-sm-10">@detailstable.ServiceStatus</dd>
            <dt class="col-sm-2">ServiceCode</dt>
            <dd class="col-sm-10">@detailstable.ServiceCode</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@detailstable.Description</dd>
            <dt class="col-sm-2">PartsUsedForRepair</dt>
            <dd class="col-sm-10">@detailstable.PartsUsedForRepair</dd>
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@detailstable.Price</dd>
            <dt class="col-sm-2">ArrivalDate</dt>
            <dd class="col-sm-10">@detailstable.ArrivalDate</dd>
            <dt class="col-sm-2">CompletionDate</dt>
            <dd class="col-sm-10">@detailstable.CompletionDate</dd>
        </dl>
        <div>
            @if (RoleService.Role != "Staff")
            {
                <a href="@($"/detailstables/edit?id={detailstable.id}")" class="btn btn-back">Edit</a>
            }
            |
            <a href="@($"/detailstables")" class="btn btn-edit">Back to List</a>
        </div>
    }
</div>

@code {
    DetailsTable? detailstable;

    [SupplyParameterFromQuery]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);

        var loggedInStaff = await DbContext.LoggedInStaff.FirstOrDefaultAsync();
        if (loggedInStaff != null)
        {
            RoleService.UpdateSharedData($"{loggedInStaff.Role}");
        }
        await Task.Delay(500);
        using var context = DbFactory.CreateDbContext();
        detailstable = await context.Details.FirstOrDefaultAsync(m => m.id == id);

        if (detailstable is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}

<style>
    /* Add this to your CSS file */
    .btn {
        display: inline-block;
        padding: 10px 20px;
        margin: 5px;
        font-size: 16px;
        font-weight: bold;
        text-align: center;
        text-decoration: none;
        border-radius: 5px;
        border: 2px solid; /* Thicker border */
        background-color: transparent; /* Transparent background */
        color: currentColor; /* Uses the color of the border */
        transition: background-color 0.3s, color 0.3s;
    }

    .btn-edit {
        border-color: #007bff; /* Blue border */
        color: #007bff; /* Blue text */
    }

        .btn-edit:hover {
            background-color: #007bff; /* Blue background on hover */
            color: white; /* White text on hover */
        }

    .btn-back {
        border-color: #6c757d; /* Gray border */
        color: #6c757d; /* Gray text */
    }

        .btn-back:hover {
            background-color: #6c757d; /* Gray background on hover */
            color: white; /* White text on hover */
        }


    .row {
        display: flex;
        flex-wrap: wrap;
        margin: 0 auto; /* Ortalamak için margin auto ekleyin */
        max-width: 1200px; /* Maksimum genişliği belirleyin (isteğe bağlı) */
        padding: 20px; /* Sağdan ve soldan boşluk ekleyin */
        box-sizing: border-box;
    }

    .item {
        box-sizing: border-box;
        padding: 10px;
        border-bottom: 1px solid transparent; /* Şu an gri çizgi yerine şeffaf çizgi */
    }

    .short {
        height: 50px; /* Kısa satırlar için yükseklik */
    }

    .full-width {
        width: 100%;
    }

    .half-width {
        width: 50%;
    }

    .one-half {
        width: 50%;
        display: inline-block;
        vertical-align: top;
    }

    .one-third {
        width: 33.33%;
    }

    .address,
    .description {
        height: auto; /* İçerik genişliğine göre yüksekliği ayarla */
    }


    .separator {
        width: 100%;
        height: 2px; /* Çizginin kalınlığı */
        background-color: black;
        margin: 20px 10px; /* Çizgi etrafında boşluk */
    }

    /* Adres ve Açıklama dışındaki öğelerden sınırı kaldır */
    .item:not(.address):not(.description) {
        border-bottom: 0; /* Alt sınırı kaldır */
    }

</style>