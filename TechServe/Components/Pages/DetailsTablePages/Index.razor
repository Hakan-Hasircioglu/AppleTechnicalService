@page "/detailstables"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TechServe.Model
@using TechServe.Data
@using Services
@using TechServe.Components.Helpers

@inject IDbContextFactory<TechServe.Data.TechServeContext> DbFactory
@inject TechServeContext DbContext
@inject NavigationManager NavigationManager
@inject NavigationManager NavigationManager
@inject LoggedInStaff LoggedInStaff
@inject RoleService RoleService

<PageTitle>Details</PageTitle>
    <h1>Details</h1>
@if (isLoading)
{
    <div class="spinner">Loading...</div>
}
else
{
     <div class="filter-section" style="margin-top:85px;">
            <div class="row justify-content-between">
                <div class="col-md-2">
                    <label>Service Code:</label>
                    <input type="text" @oninput="OnBarcodeChangedHandler" class="form-control" placeholder="Search by Service Code" />
                </div>
            </div>
    </div>
   <table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>Service Type</th>
            <th>Service Status</th>
            <th>Service Code</th>
            <th>Description</th>
            <th>Price</th>
            <th>Used Parts</th>
            <th>Arrival</th>
            <th>Completion</th>
            <th>Controls</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var details in filteredMasters)
        {
            <tr>
                <td>@details.TypeOfService</td>
                <td>@details.ServiceStatus</td>
                <td>@details.ServiceCode</td>
                <td>@details.Description</td>
                <td>@details.PartsUsedForRepair</td>
                <td>@details.Price</td>
                <td>@details.ArrivalDate.ToString("yyyy-MM-dd")</td>
                <td>
                    @if (DateOnly.FromDateTime(details.CompletionDate) == DateOnly.MinValue)
                    {
                        <span>Not Completed</span>
                    }
                    else
                    {
                        <span>@details.CompletionDate.ToString("yyyy-MM-dd")</span>
                    }
                </td>
                <td>
                    @if (RoleService.Role != "Staff")
                    {
                        <a href="@($"detailstables/edit?id={details.id}")" class="btn btn-edit btndiff">Edit</a>
                    } |
                    <a href="@($"detailstables/details?id={details.id}")" class="btn btn-edit btndiff">Details</a> |
                    @if (RoleService.Role != "Staff")
                    {
                        <a href="@($"detailstables/delete?id={details.id}")" class="btn btn-edit btndiff btndlt">Delete</a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
}
@code {
    TechServeContext context = default!;
    private Master master { get; set; }
    private Details details { get; set; }
    private IEnumerable<DetailsTable> allMasters;
    private IEnumerable<DetailsTable> filteredMasters;
    private bool isLoading = true;
    private string BarcodeSearch = string.Empty;

    protected override async Task OnInitializedAsync()
    {       
        await Task.Delay(500);
        isLoading = false;
        var loggedInStaff = await DbContext.LoggedInStaff.FirstOrDefaultAsync();
        if (loggedInStaff != null)
        {
            RoleService.UpdateSharedData($"{loggedInStaff.Role}");
        }
    }
    protected override void OnInitialized()
    {
        // Veriyi al
        allMasters = DbFactory.CreateDbContext().Details;
        // Başlangıçta tüm verileri göster
        filteredMasters = allMasters;
    }
    private void OnBarcodeChangedHandler(ChangeEventArgs e)
    {
        BarcodeSearch = e.Value.ToString();
        FilterData();
    }
    private void FilterData()
    {
     filteredMasters = allMasters
        .Where(master => master != null 
            && (string.IsNullOrEmpty(BarcodeSearch) || !string.IsNullOrEmpty(master.ServiceCode) && master.ServiceCode.Contains(BarcodeSearch))
        ).ToList();
    }
}

    <style>
         .filter-section {
        border: 2px solid #0461ae; /* Çevresine mavi bir sınır ekleyelim */
        border-radius: 4px; /* Köşeleri yuvarlak yapalım */
        padding: 5px; /* İçeriğin kenarlardan uzak durması için padding ekleyelim */
        background-color: #f5f5f5; /* Arka plan rengini açık gri yapalım */
        margin-bottom: 5px; /* Filtreleme alanı ile aşağıdaki içerik arasında boşluk bırakalım */
    }
    /* Sağda sabit konumlandırılmış select */
    .select-container {
        display: flex;
        justify-content: flex-end; /* Sağ tarafa hizala */
        padding: 10px; /* İç boşluk */
        background-color: #edd7d3; /* Arka plan rengini hafif gri yap */
    }

        .select-container select {
            width: auto; /* Genişliği otomatik ayarla */
            max-width: 200px; /* Maksimum genişlik ayarla */
        }
    /* Add this to your CSS file */
    .btn {
        display: inline-block;
        padding: 10px 20px;
        margin: 5px;
        font-size: 16px;
        font-weight: bold;
        text-align: center;
        text-decoration: none;
        border-radius: 5px;
        border: 2px solid; /* Thicker border */
        background-color: transparent; /* Transparent background */
        color: currentColor; /* Uses the color of the border */
        transition: background-color 0.3s, color 0.3s;
    }

    .btn-edit {
        border-color: #007bff; /* Blue border */
        color: #007bff; /* Blue text */
    }

        .btn-edit:hover {
            background-color: #007bff; /* Blue background on hover */
            color: white; /* White text on hover */
        }

    .btn-back {
        border-color: #6c757d; /* Gray border */
        color: #6c757d; /* Gray text */
    }

        .btn-back:hover {
            background-color: #6c757d; /* Gray background on hover */
            color: white; /* White text on hover */
        }

    .table-container {
        width: 100%;
        overflow-x: auto; /* Ekrandan taşmayı engellemek için yatay kaydırma çubuğu ekler */
        margin: 85px 0;
    }

    .table {
        width: 100%;
        min-width: 400px; /* Tablo genişliği en az 800px olarak ayarlandı */
        border-collapse: collapse; /* Tüm çizgileri birleştirir */
        font-family: Arial, sans-serif;
        background-color: #ffffff; /* Arka plan beyaz */
        color: #333; /* Yazı rengi */
    }

        .table th, .table td {
            padding: 5px;
            text-align: left;
            border: 1px solid #87cefa; /* Açık mavi tonlarında kenarlık */
            white-space: nowrap; /* Satırların tek satırda kalmasını sağlar */
        }

        .table th {
            background-color: #add8e6; /* Başlıklar için açık mavi */
            font-weight: bold;
        }

        .table tr:nth-child(even) {
            background-color: #e6f7ff; /* Çift satırlar için açık mavi arka plan */
        }

    .table-hover tbody tr:hover {
        background-color: #b3e0ff; /* Üzerine gelindiğinde koyu mavi arka plan */
    }

    .btndiff {
        padding: 0px 6px;
        margin: 1px;
        font-size: 9px;
    }

    .btndlt {
        border-color: #ff0f00;
        color: #ff0f00;
    }

        .btndlt:hover {
            background-color: #ff0f00;
            color: white;
        }
</style