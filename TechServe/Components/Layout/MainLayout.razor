@inherits LayoutComponentBase

@using Microsoft.EntityFrameworkCore
@using TechServe.Model
@using TechServe.Data
@using TechServe.Components.Helpers

@inject NavigationManager NavigationManager
@inject IDbContextFactory<TechServe.Data.TechServeContext> DbFactory
@inject NavigationManager NavigationManager
@inject TechServeContext DbContext
@inject LoggedInStaff LoggedInStaff

    <main>
        @if (!mainPage)
        {
        <div class="topbar">
            <div class="topbar-left">
                <h1>Tech Serve</h1>
            </div>
            <div class="topbar-middle"></div>
            <div class="topbar-right">
                <a href="masters" class="button-link" >Service Hub</a >
                <a href="costumers" class="button-link" >Costumers</a >
                <a href="detailstables" class="button-link">Details</a >
                <a href="devices" class="button-link">Devices</a >
                <a href="spareparts" class="button-link">Spare Parts</a >
                @if(role == "Manager" || role == "Admin")
                {
                    <a href="staff" class="button-link">Employees</a >
                }
                <div class="profile-section">
                    <div class="profile-info">
                        <p class="name" style="color:#0461ae;">@fullname</p>
                        <p class="title" style="color:#c01058;">@role</p>
                        
                    </div
                    <i class="fas fa-cog settings-icon" @onclick="OpenSettings"></i>
                    @if(isSettingOpen)
                    {
                        <button class="logout-button btndlt" @onclick="GoToHomePage">Log Out</button>
                    }
                </div>
            </div>
        </div>
        }

        <article class="content px-4">
            @Body
        </article>
    </main>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {

    private bool showNavbar;
    private bool mainPage;
    private bool isSettingOpen;
    private LoggedInStaff loggedInStaff = new LoggedInStaff();
    private string fullname;
    public string role;
    private string currentPage;


    private async Task GoToHomePage()
    {    
        await DbContext.TruncateLoggedInStaffTableAsync();
        NavigationManager.NavigateTo("/loadingpage?source=master");
        StateHasChanged();
    }

    protected void OpenSettings()
    {
        isSettingOpen = !isSettingOpen;
    }

    protected override void OnInitialized()
    {
        // NavigationManager.LocationChanged olayına abone ol
        NavigationManager.LocationChanged += OnLocationChanged;

        // İlk yüklemede kontrol et
        UpdateNavbarVisibility(NavigationManager.Uri);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Sayfa değişikliğinde kontrol et

        UpdateNavbarVisibility(e.Location);
        WhichPage();
    }
    protected override async Task OnInitializedAsync()
    {
        UpdateNavbarVisibility(NavigationManager.Uri);

        if (currentPage != "/")
        {
            var loggedInStaff = await DbContext.LoggedInStaff.FirstOrDefaultAsync();

            if (loggedInStaff != null)
            {
                fullname = loggedInStaff.FullName;
                role = loggedInStaff.Role;
            }
        }
    }

    private async Task WhichPage()
    {
        if (currentPage != "/")
        {
            var loggedInStaff = await DbContext.LoggedInStaff.FirstOrDefaultAsync();

            if (loggedInStaff != null)
            {
                fullname = loggedInStaff.FullName;
                role = loggedInStaff.Role;
            }
        }
    }
    private void UpdateNavbarVisibility(string url)
    {
        // URL'yi kontrol ederek Navbar'ı göster veya gizle
        currentPage = new Uri(url).Segments.Last();

        if (currentPage == "masters" || currentPage == "devices" || currentPage == "detailstables" || currentPage == "costumers" || currentPage == "spareparts" || currentPage == "staff")
        {
            showNavbar = true;
            mainPage = false;
        }
        else if (currentPage == "/" || currentPage == "loadingpage")
        {
            showNavbar = false;
            mainPage = true;
        }
        else
        {
            showNavbar = false;
            mainPage = false;
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        // Aboneliği kaldır
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

<style>
.button-link {
    display: inline-block;
    background-color: #c01058; /* Buton rengi */
    color: white; /* Yazı rengi */
    padding: 10px 15px;
    text-decoration: none; /* Alt çizgi kaldır */
    border-radius: 5px; /* Köşeleri yuvarla */
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s, box-shadow 0.3s;
    border: 1px solid transparent; /* Kenarlık rengini şeffaf yap */
    margin-left: 5px;
}

.button-link:hover {
    background-color: #ef8b0c; /* Hover rengi */
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); /* Hover efektine gölge ekle */
}

.button-link:active {
    background-color: #c01058; /* Tıklama rengi */
}


    .topbar {
        display: flex;
        align-items: center;
        background-color: #0461ae;
        color: #edd7d3;
        padding: 10px;
        position: relative;
        height: 60px; /* Topbar yüksekliğini ayarlayın */
    }

    .topbar-left {
        flex: 1;
    }

    .topbar-middle {
        flex: 2;
    }

    .topbar-right {
        display: flex;
        align-items: center;
        position: relative;
        margin-left: auto; /* Profil kısmını en sağa yerleştirmek için */
    }

    .profile-section {
        background-color: #efefef;
        padding: 10px;
        border-radius: 5px;
        position: absolute;
        right: 0;
        top: 55px; /* Profil kısmını topbar'ın altına yerleştirin */
        width: 200px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 1; /* Profil kısmının butonlardan üstte görünmesini sağlar */
    }

    .profile-info {
        margin-bottom: 10px;
    }

    .name {
        font-weight: bold;
        margin: 0;
        color:black;
    }

    .title {
        margin: 0;
        color: #111111;
    }

    .logout-button {

        color: white;
        padding: 5px;
        cursor: pointer;
        width: 100%;
        border-radius: 5px;
        font-size: 14px;
    }



    .settings-icon {
        color: black; /* İkon rengini siyah yapar */
        font-size: 14px;
        cursor: pointer;
    }
    .btn {
        display: inline-block;
        padding: 10px 20px;
        margin: 5px;
        font-size: 16px;
        font-weight: bold;
        text-align: center;
        text-decoration: none;
        border-radius: 5px;
        border: 2px solid; /* Thicker border */
        background-color: transparent; /* Transparent background */
        color: currentColor; /* Uses the color of the border */
        transition: background-color 0.3s, color 0.3s;
    }

    .btn-edit {
        border-color: #007bff; /* Blue border */
        color: #007bff; /* Blue text */
    }

        .btn-edit:hover {
            background-color: #007bff; /* Blue background on hover */
            color: white; /* White text on hover */
        }

    .btn-back {
        border-color: #6c757d; /* Gray border */
        color: #6c757d; /* Gray text */
    }

        .btn-back:hover {
            background-color: #6c757d; /* Gray background on hover */
            color: white; /* White text on hover */
        }

    .btndiff {
        padding: 0px 6px;
        margin: 1px;
        font-size: 9px;
    }

    .btndlt {
        border-color: #ff0f00;
        color: #ff0f00;
    }

        .btndlt:hover {
            background-color: #ff0f00;
            color: white;
        }
</style>